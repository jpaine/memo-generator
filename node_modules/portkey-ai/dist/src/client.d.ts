import { ApiClientInterface } from './_types/generalTypes';
import * as API from './apis';
import { PostBodyParams, PostResponse } from './apis/postMethod';
import { ApiClient, APIPromise, RequestOptions } from './baseClient';
import { Stream } from './streaming';
export declare class Portkey extends ApiClient {
    apiKey: string | null;
    baseURL: string;
    virtualKey: string | null;
    config: Record<string, unknown> | string | null | undefined;
    provider: string | null | undefined;
    traceID: string | null | undefined;
    metadata: Record<string, unknown> | null | undefined;
    Authorization?: string;
    cacheForceRefresh?: boolean | null | undefined;
    debug?: boolean | null | undefined;
    customHost?: string | null | undefined;
    openaiProject?: string | null | undefined;
    openaiOrganization?: string | null | undefined;
    awsSecretAccessKey?: string | null | undefined;
    awsAccessKeyId?: string | null | undefined;
    awsSessionToken?: string | null | undefined;
    awsRegion?: string | null | undefined;
    vertexProjectId?: string | null | undefined;
    vertexRegion?: string | null | undefined;
    workersAiAccountId?: string | null | undefined;
    azureResourceName?: string | null | undefined;
    azureDeploymentId?: string | null | undefined;
    azureApiVersion?: string | null | undefined;
    azureEndpointName?: string | null | undefined;
    huggingfaceBaseUrl?: string | null | undefined;
    forwardHeaders?: Array<string> | null | undefined;
    requestTimeout?: number | null | undefined;
    cacheNamespace?: string | null | undefined;
    strictOpenAiCompliance?: boolean | null | undefined;
    anthropicBeta?: string | null | undefined;
    anthropicVersion?: string | null | undefined;
    mistralFimCompletion?: string | null | undefined;
    constructor({ apiKey, baseURL, config, virtualKey, provider, traceID, metadata, Authorization, cacheForceRefresh, debug, customHost, openaiProject, openaiOrganization, awsSecretAccessKey, awsAccessKeyId, awsSessionToken, awsRegion, vertexProjectId, vertexRegion, workersAiAccountId, azureResourceName, azureDeploymentId, azureApiVersion, azureEndpointName, huggingfaceBaseUrl, forwardHeaders, cacheNamespace, requestTimeout, strictOpenAiCompliance, anthropicBeta, anthropicVersion, mistralFimCompletion, }: ApiClientInterface);
    completions: API.Completions;
    chat: API.Chat;
    embeddings: API.Embeddings;
    files: API.MainFiles;
    images: API.Images;
    models: API.Models;
    generations: API.Generations;
    prompts: API.Prompt;
    feedback: API.Feedback;
    batches: API.Batches;
    fineTuning: API.FineTuning;
    moderations: API.Moderations;
    audio: API.Audio;
    uploads: API.Uploads;
    admin: API.Admin;
    virtualKeys: API.VirtualKeys;
    apiKeys: API.ApiKeys;
    configs: API.Configs;
    beta: {
        assistants: API.Assistants;
        threads: API.Threads;
        vectorStores: API.VectorStores;
        chat: API.BetaChat;
    };
    post: (url: string, _body: PostBodyParams, params?: ApiClientInterface, opts?: RequestOptions) => APIPromise<Stream<PostResponse>> | APIPromise<PostResponse>;
}
