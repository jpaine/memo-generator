import { ApiClientInterface } from '../_types/generalTypes';
import { ApiResource } from '../apiResource';
import { RequestOptions } from '../baseClient';
export declare class Threads extends ApiResource {
    messages: Messages;
    runs: Runs;
    constructor(client: any);
    create(_body: ThreadCreateParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    retrieve(threadId: string, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    update(threadId: string, _body: ThreadUpdateParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    del(threadId: string, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    createAndRun(_body: ThreadCreateAndRunParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    createAndRunPoll(_body: ThreadCreateAndRunParamsNonStreaming, params?: ApiClientInterface, opts?: RequestOptions & {
        pollIntervalMs?: number;
    }): Promise<any>;
    createAndRunStream(_body: ThreadCreateAndRunParamsBaseStream, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
}
export declare class Messages extends ApiResource {
    create(threadId: string, _body: MessageCreateParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    list(threadId: string, _query?: MessageListParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    retrieve(threadId: string, messageId: string, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    update(threadId: string, messageId: string, _body: MessageUpdateParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
}
export declare class Runs extends ApiResource {
    steps: Steps;
    constructor(client: any);
    create(threadId: string, _body: RunCreateParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    list(threadId: string, _query?: RunListParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    retrieve(threadId: string, runId: string, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    update(threadId: string, runId: string, _body: RunUpdateParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    submitToolOutputs(threadId: string, runId: string, _body: RunSubmitToolOutputsParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    submitToolOutputsAndPoll(threadId: string, runId: string, _body: RunSubmitToolOutputsParamsNonStreaming, params?: ApiClientInterface, opts?: RequestOptions & {
        pollIntervalMs?: number;
    }): Promise<any>;
    submitToolOutputsStream(threadId: string, runId: string, _body: RunSubmitToolOutputsParamsStreaming, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    cancel(threadId: string, runId: string, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    createAndPoll(threadId: string, _body: RunCreateParamsNonStreaming, params?: ApiClientInterface, opts?: RequestOptions & {
        pollIntervalMs?: number;
    }): Promise<any>;
    createAndStream(threadId: string, _body: RunCreateParamsBaseStream, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    poll(threadId: string, runId: string, params?: ApiClientInterface, opts?: RequestOptions & {
        pollIntervalMs?: number;
    }): Promise<any>;
    stream(threadId: string, _body: RunCreateParamsBaseStream, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
}
export declare class Steps extends ApiResource {
    list(threadId: string, runId: string, _query?: StepListParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    retrieve(threadId: string, runId: string, stepId: string, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
}
export interface ThreadCreateParams {
    messages?: Array<Message>;
    metadata?: unknown | null;
    [key: string]: any;
}
export interface Message {
    content: string;
    role: string;
    file_ids?: Array<string>;
    metadata?: unknown | null;
}
export interface ThreadUpdateParams {
    metadata?: unknown | null;
    [key: string]: any;
}
export interface MessageCreateParams {
    content: string;
    role: string;
    file_ids?: Array<string>;
    metadata?: unknown | null;
    [key: string]: any;
}
export interface MessageListParams extends CursorPageParams {
    order?: string;
}
export interface CursorPageParams {
    after?: string;
    limit?: number;
}
export interface FileListParams extends CursorPageParams {
    before?: string;
    order?: string;
}
export interface MessageUpdateParams {
    metadata?: unknown | null;
    [key: string]: any;
}
export interface RunCreateParams {
    assistant_id: string;
    additional_instructions?: string | null;
    instructions?: string | null;
    metadata?: unknown | null;
    model?: string | null;
    tools?: Array<any> | null;
}
export interface RunCreateParamsNonStreaming extends RunCreateParams {
    stream?: false | null;
}
export interface ThreadCreateAndRunParams {
    assistant_id: string;
    instructions?: string | null;
    metadata?: unknown | null;
    model?: string | null;
    thread?: any;
    tools?: Array<any> | null;
}
export interface ThreadCreateAndRunParamsNonStreaming extends ThreadCreateAndRunParams {
    stream?: false | null;
}
export type ThreadCreateAndRunParamsBaseStream = Omit<ThreadCreateAndRunParams, 'stream'> & {
    stream?: true;
};
export interface RunListParams extends CursorPageParams {
    before?: string;
    order?: string;
}
export interface StepListParams extends CursorPageParams {
    before?: string;
    order?: string;
}
export interface RunUpdateParams {
    metadata?: unknown | null;
    [key: string]: any;
}
export interface RunSubmitToolOutputsParams {
    tool_outputs: Array<ToolOutput>;
    [key: string]: any;
}
export interface ToolOutput {
    output?: string;
    tool_call_id?: string;
}
export type RunCreateParamsBaseStream = Omit<RunCreateParams, 'stream'> & {
    stream?: true;
};
export interface RunSubmitToolOutputsParamsNonStreaming extends RunSubmitToolOutputsParams {
    stream?: false | null;
}
export interface RunSubmitToolOutputsParamsStreaming extends RunSubmitToolOutputsParams {
    stream: true;
}
