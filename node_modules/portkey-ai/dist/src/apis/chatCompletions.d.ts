import { ChatCompletionMessageToolCall, ChatCompletionStreamOptions, ChatCompletionTokenLogprob } from 'openai/resources/chat/completions';
import { APIResponseType, ApiClientInterface } from '../_types/generalTypes';
import { ModelParams } from '../_types/portkeyConstructs';
import { ApiResource } from '../apiResource';
import { APIPromise, RequestOptions } from '../baseClient';
import { Stream } from '../streaming';
export declare class Chat extends ApiResource {
    completions: ChatCompletions;
}
declare class ChatCompletions extends ApiResource {
    create(_body: ChatCompletionsBodyNonStreaming, params?: ApiClientInterface, opts?: RequestOptions): APIPromise<ChatCompletion>;
    create(_body: ChatCompletionsBodyStreaming, params?: ApiClientInterface, opts?: RequestOptions): APIPromise<Stream<ChatCompletion>>;
    create(_body: ChatCompletionsBodyBase, params?: ApiClientInterface, opts?: RequestOptions): APIPromise<Stream<ChatCompletion> | ChatCompletion>;
}
export interface ChatCompletionsBodyBase extends ModelParams {
    messages?: Array<Message>;
    response_format?: object;
}
export interface ChatCompletionsBodyStreaming extends ChatCompletionsBodyBase {
    stream?: true;
    stream_options?: ChatCompletionStreamOptions;
}
export interface ChatCompletionsBodyNonStreaming extends ChatCompletionsBodyBase {
    stream?: false;
}
export type ChatCompletionCreateParams = ChatCompletionsBodyNonStreaming | ChatCompletionsBodyStreaming;
interface Usage {
    prompt_tokens?: number;
    completion_tokens?: number;
    total_tokens?: number;
    [key: string]: any;
}
interface Message {
    role: string;
    content: string;
    refusal?: string;
    function_call?: any;
    tool_calls?: Array<ChatCompletionMessageToolCall>;
    tool_call_id?: string;
}
export interface Logprobs {
    content: Array<ChatCompletionTokenLogprob> | null;
    refusal: Array<ChatCompletionTokenLogprob> | null;
    [key: string]: any;
}
interface Choices {
    index?: number;
    message?: Message;
    delta?: Message;
    finish_reason?: string;
    logprobs?: Logprobs;
    [key: string]: any;
}
interface ChatCompletion extends APIResponseType {
    id: string;
    object: string;
    created: number;
    model: string;
    choices: Array<Choices>;
    usage: Usage;
    service_tier?: string;
    system_fingerprint?: string;
    [key: string]: any;
}
export {};
