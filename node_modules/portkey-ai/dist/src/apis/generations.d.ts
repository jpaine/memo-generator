import { APIResponseType, ApiClientInterface } from '../_types/generalTypes';
import { ModelParams } from '../_types/portkeyConstructs';
import { ApiResource } from '../apiResource';
import { APIPromise, RequestOptions } from '../baseClient';
import { Stream } from '../streaming';
export declare class Generations extends ApiResource {
    create(_body: GenerationsBody, opts?: RequestOptions): APIPromise<Generation>;
}
export interface GenerationsBody extends ModelParams {
    promptID: string;
    variables?: Record<string, any>;
}
export interface Generation extends APIResponseType {
    success: boolean;
    data: Record<string, any>;
}
export interface PromptBodyBase extends ModelParams {
    promptID?: string;
    variables?: Record<string, any>;
}
export interface PromptsCreateStreaming extends PromptBodyBase {
    stream?: true;
}
export interface PromptsCreateNonStreaming extends PromptBodyBase {
    stream?: false;
}
export interface Functions {
    name?: string;
    description?: string;
    parameters?: object;
}
export interface Tool {
    function?: Functions;
    type?: string;
}
export interface Messages {
    content?: string;
    role?: string;
}
export type PromptsCreateParams = PromptsCreateNonStreaming | PromptsCreateStreaming;
type PromptsResponse = Record<string, any> & APIResponseType;
type PromptRenderResponse = {
    success: boolean;
    data: {
        messages?: Messages[];
        prompt?: string;
        model?: string;
        stream?: boolean;
        suffix?: string;
        max_tokens?: number;
        temperature?: number;
        top_k?: number;
        top_p?: number;
        n?: number;
        stop_sequences?: string[];
        functions?: Functions[];
        function_call?: string | Functions;
        logprobs?: boolean;
        top_logprobs?: number;
        echo?: boolean;
        stop?: string | string[];
        presence_penalty?: number;
        frequency_penalty?: number;
        best_of?: number;
        logit_bias?: {
            [key: string]: number;
        };
        user?: string;
        organization?: string;
        tool_choice?: string;
        tools?: Tool[];
        response_format?: object;
        seed?: number;
    };
} & APIResponseType;
export declare class Prompt extends ApiResource {
    completions: PromptCompletions;
    render(_body: PromptsCreateParams, params?: ApiClientInterface, opts?: RequestOptions): APIPromise<PromptRenderResponse>;
}
export declare class PromptCompletions extends ApiResource {
    create(_body: PromptsCreateNonStreaming, params?: ApiClientInterface, opts?: RequestOptions): APIPromise<PromptsResponse>;
    create(_body: PromptsCreateStreaming, params?: ApiClientInterface, opts?: RequestOptions): APIPromise<Stream<PromptsResponse>>;
    create(_body: PromptsCreateParams, params?: ApiClientInterface, opts?: RequestOptions): APIPromise<Stream<PromptsResponse> | PromptsResponse>;
}
export {};
